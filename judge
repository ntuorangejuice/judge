#!/usr/bin/python

import sys
import os
import traceback

USAGE_MESSAGE = """
judge - online judge helper
---------------------------

Commands:

init [<solution_name>] [-l <cpp/java>] [-t <template>]
    Create a solution in specified language (default C++).
    Solution will be set to current directory if not specified, which is the same for the followings.

edit <solution_name>
    Open Sublime Text to edit the solution.

run <solution_name> [-i <input_file>]
    Compile a solution and run against test cases.
    This is the default command if no command is specified.

check <solution_name> [-i <input_file>]
    Compile a solution and run against test cases, and check the output against correct answer.


Options:

--help, -h
    Print this user manual.

--version, -v
    Print software version.
"""
USAGE_MESSAGE = USAGE_MESSAGE[1:]

SOLUTION_FILE = 'main.cpp'
OUTPUT_FILE = 'main.out'
TEMPLATE_FILE = 'templates/default.cpp'
COMPILE_SCRIPT = 'g++ %s -I%s -DJUDGE -std=c++0x -o %s'
RUN_SCRIPT = 'time %s < %s'

arguments = []
solution_dir = None


class PrintColor:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


def print_script(s):
    print PrintColor.OKBLUE + s + PrintColor.ENDC


def print_success(s):
    print PrintColor.OKGREEN + s + PrintColor.ENDC


def print_error(s):
    print PrintColor.FAIL + s + PrintColor.ENDC


def check_solution_existence():
    if not os.path.isdir(solution_dir):
        return False
    if os.path.isfile(os.path.join(solution_dir, SOLUTION_FILE)):
        return True
    return False


def get_template():
    template_file = os.path.join(os.path.dirname(__file__), TEMPLATE_FILE)
    with open(template_file, 'r') as f:
        return f.read()


def determine_solution_dir():
    global solution_dir
    cwd = os.getcwd()
    if len(arguments) == 1:
        solution_dir = cwd
    else:
        solution_dir = os.path.join(cwd, arguments[1])


def init():
    global solution_dir
    cwd = os.getcwd()
    if len(arguments) == 1:
        solution_dir = cwd
    else:
        solution_dir = os.path.join(cwd, arguments[1])

    if check_solution_existence():
        print "Solution exists in " + solution_dir
        exit(1)

    if not os.path.exists(solution_dir):
        try:
            os.mkdir(solution_dir)
        except Exception as e:
            print "Failed to create solution at " + solution_dir + " with messages: "
            traceback.print_exc()

    template = get_template()
    with open(os.path.join(solution_dir, SOLUTION_FILE), 'w') as f:
        f.write(template)

    open(os.path.join(solution_dir, 'sample.input'), 'w')

    # TODO: read or config default editor
    os.system('subl ' + os.path.join(solution_dir, SOLUTION_FILE))

    print "Created solution at " + solution_dir


def edit():
    global solution_dir
    cwd = os.getcwd()
    if len(arguments) == 1:
        solution_dir = cwd
    else:
        solution_dir = os.path.join(cwd, arguments[1])

    if not check_solution_existence():
        print "Solution not found in " + solution_dir
        exit(2)

    os.system('subl ' + os.path.join(solution_dir, SOLUTION_FILE))


def run():
    global solution_dir
    cwd = os.getcwd()
    if len(arguments) == 1:
        solution_dir = cwd
    else:
        solution_dir = os.path.join(cwd, arguments[1])

    if not check_solution_existence():
        print "Solution not found in " + solution_dir
        exit(2)

    print "Start compiling..."

    compile_script = COMPILE_SCRIPT % (
        os.path.join(solution_dir, SOLUTION_FILE),
        os.path.join(os.path.dirname(__file__), 'cpp_header'),
        os.path.join(solution_dir, OUTPUT_FILE)
    )

    print_script(compile_script)

    os.system(compile_script)
    if os.path.isfile(os.path.join(solution_dir, OUTPUT_FILE)):
        print_success("Successfully compiled.")
    else:
        print_error("Failed to compile.")
        exit(1)

    # Check input
    if len(arguments) == 4 and arguments[2] == '-i':
        input_files = [arguments[3]]
    else:
        input_files = []
        for file_name in os.listdir(solution_dir):
            if len(file_name) > 6 and file_name[-6:] == '.input':
                input_files.append(file_name)

    # Run
    for run_input in input_files:
        message = "Running with input " + run_input
        print "-" * len(message)
        print message

        run_script = RUN_SCRIPT % (
            os.path.join(solution_dir, OUTPUT_FILE),
            os.path.join(solution_dir, run_input)
        )
        print_script(run_script)

        os.system(run_script)

    # Delete
    os.remove(os.path.join(solution_dir, OUTPUT_FILE))


COMMANDS = {
    "init": init,
    "edit": edit,
    "run": run
}


def main():
    global arguments
    global solution_dir

    if len(sys.argv) == 1:
        command = 'run'
        arguments = ['run'] + sys.argv[1:]
    else:
        command = sys.argv[1]
        arguments = sys.argv[1:]
    determine_solution_dir()
    if command == '-h' or command == '--help':
        print USAGE_MESSAGE
        exit(0)

    if command not in COMMANDS.keys():
        if command[0] == '-':
            command = 'run'
            solution_dir = os.getcwd()
            arguments = ['run', '.'] + arguments
        else:
            solution_dir = os.path.join(os.getcwd(), command)
            command = 'run'
            arguments = ['run'] + arguments
        if not check_solution_existence():
            print "Command \"" + sys.argv[1] + "\" not found. Run \"judge -h\" to print the user manual."
            exit(1)
    COMMANDS[command]()

if __name__ == "__main__":
    main()
